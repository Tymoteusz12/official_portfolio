{"version":3,"sources":["containers/Navigation/Navigation.module.css","containers/Settings/settings.module.css","shared/transitionClasses.js","shared/transition.module.css","App.module.css","containers/Settings/toggleTheme/toggle.js","containers/Settings/settings.js","store/actions/UI.js","store/actions/actionTypes.js","containers/Navigation/Navigation.js","components/UI/Spinner.js","App.js","serviceWorker.js","store/reducers/UI.js","index.js","containers/Settings/toggleTheme/toggle.module.css"],"names":["module","exports","textSmoothTransition","enter","classes","enterActive","enterDone","exit","exitDone","imgSmoothTransition","pageTransition","buttonChanger","buttonClasses","Toggle","props","useState","active","toggleButton","useEffect","className","switch","CSSTransition","in","classNames","timeout","toggler","onClick","prevState","sun","moon","Settings","changeToEnglish","language","changeLanguage","changeToPolish","toggleWrapper","this","Component","connect","state","theme","dispatch","type","Navigation","nav_bars_pl","nav_bars_eng","paths","navID","wrapper","list","onMouseOver","map","path","key","to","NavLink","activeClassName","withRouter","spinner","loader","LazyStart","lazy","LazySkills","LazyHire","App","preload","preloadContainers","history","location","pathname","setState","componentDidMount","pageToRender","TransitionGroup","render","fallback","from","lang","Boolean","window","hostname","match","initialState","action","changeTheme","reducer","store","compose","createStore","UIReducer","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16e25eab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Navigation_wrapper__1lctD\",\"list\":\"Navigation_list__2Z6uO\",\"NavLink\":\"Navigation_NavLink__3ura2\",\"active\":\"Navigation_active__1fD5T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggleWrapper\":\"settings_toggleWrapper__2Mcfs\",\"active\":\"settings_active__kJacf\"};","import classes from './transition.module.css';\r\nimport buttonClasses from '../containers/Settings/toggleTheme/toggle.module.css';\r\n\r\nexport const textSmoothTransition = {\r\n    enter: classes['textToggle-enter'],\r\n    enterActive: classes['textToggle-enter-active'],\r\n    enterDone: classes['textToggle-enter-done'],\r\n    exit: classes['textToggle-exit'],\r\n    exitDone: classes['textToggle-exit-done']\r\n}\r\n\r\nexport const imgSmoothTransition = {\r\n    enter: classes['imgToggle-enter'],\r\n    enterActive: classes['imgToggle-enter-active'],\r\n    enterDone: classes['imgToggle-enter-done'],\r\n    exit: classes['imgToggle-exit'],\r\n    exitDone: classes['imgToggle-exit-done']\r\n}\r\n\r\nexport const pageTransition = {\r\n    enter: classes['page-enter'],\r\n    enterActive: classes['page-enter-active'],\r\n    enterDone: classes['page-enter-done'],\r\n    exit: classes['page-exit'],\r\n    exitDone: classes['page-exit-done']\r\n}\r\n\r\nexport const buttonChanger={\r\n    enter: buttonClasses['buttonToggle-enter'],\r\n    enterActive: buttonClasses['buttonToggle-enter-active'],\r\n    enterDone: buttonClasses['buttonToggle-enter-done'],\r\n    exit: buttonClasses['buttonToggle-exit'],\r\n    exitDone: buttonClasses['buttonToggle-exit-done']\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textToggle-enter\":\"transition_textToggle-enter__1-CG0\",\"textToggle-enter-done\":\"transition_textToggle-enter-done__d-yi9\",\"textToggle-exit\":\"transition_textToggle-exit__ifTRU\",\"textToggle-exit-done\":\"transition_textToggle-exit-done__3Okpc\",\"imgToggle-enter\":\"transition_imgToggle-enter__2AFYK\",\"imgToggle-enter-done\":\"transition_imgToggle-enter-done__3LoGe\",\"imgToggle-exit\":\"transition_imgToggle-exit__15qi9\",\"imgToggle-exit-done\":\"transition_imgToggle-exit-done__1MC9X\",\"page-enter\":\"transition_page-enter__1pjJu\",\"page-enter-done\":\"transition_page-enter-done__13VPS\",\"page-exit\":\"transition_page-exit__2RfNl\",\"page-exit-done\":\"transition_page-exit-done__1BT0i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1rcVN\"};","import React, { useEffect, useState } from 'react';\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport classes from './toggle.module.css';\r\nimport {buttonChanger} from '../../../shared/transitionClasses';\r\n\r\nconst Toggle = props => {\r\n\r\n    const [active, toggleButton] = useState(false);\r\n\r\n    function onClickHandler(){\r\n        toggleButton((prevState) => !prevState);\r\n    }\r\n\r\n    useEffect( () =>{\r\n        toggleButton(true);\r\n    }, [])\r\n\r\n    return(\r\n        <div className={classes.switch}>\r\n            <CSSTransition \r\n                in={active}\r\n                classNames={buttonChanger}\r\n                timeout={{enter: 0, exit: 0}}>\r\n                    <div className={classes.toggler} onClick={onClickHandler}>\r\n                        <i className={classes.sun + ' ' + \"fas fa-sun\"}></i>\r\n                        <i className={classes.moon + ' ' + \"far fa-moon\"}></i>\r\n                    </div>\r\n            </CSSTransition>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Toggle;","import React, { Component } from 'react';\r\nimport classes from './settings.module.css';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport ToggleTheme from './toggleTheme/toggle';\r\nclass Settings extends Component{\r\n\r\n    changeToEnglish = () => {\r\n        if(this.props.language !== 'ENG')\r\n            this.props.changeLanguage('ENG');\r\n    }\r\n\r\n    changeToPolish= () =>{\r\n        if(this.props.language !== 'PL')\r\n            this.props.changeLanguage('PL');\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className={classes.toggleWrapper}>\r\n                <div className={classes.language} onClick={this.changeToPolish}>\r\n                <p className={\r\n                        this.props.language === 'PL' \r\n                        ? classes.active\r\n                        : null}>PL</p>\r\n                </div>\r\n                <div className={classes.language} onClick={this.changeToEnglish}>\r\n                    <p className={\r\n                        this.props.language === 'ENG' \r\n                        ? classes.active\r\n                        : null}>ENG</p>\r\n                </div>    \r\n                <ToggleTheme/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language : state.language,\r\n        theme : state.theme\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        changeLanguage: (language) => dispatch(actions.changeLanguage(language))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","import * as actionTypes from './actionTypes';\r\n\r\nexport const changeLanguage = (lang) => {\r\n    return {\r\n        type: actionTypes.CHANGE_LANGUAGE,\r\n        language: lang\r\n    }\r\n}\r\n\r\nexport const changeTheme = (themeType) => {\r\n    return {\r\n        type: actionTypes.CHANGE_THEME,\r\n        theme: themeType\r\n    }\r\n}","export const CHANGE_LANGUAGE = 'CHANGE_LANGUAGE';\r\nexport const CHANGE_THEME = 'CHANGE_THEME';","import React, { Component } from 'react';\r\nimport classes from './Navigation.module.css';\r\nimport {NavLink, withRouter} from 'react-router-dom';\r\nimport Settings from '../Settings/settings';\r\nimport {connect} from 'react-redux';\r\nclass Navigation extends Component{\r\n\r\n    state = {\r\n        nav_bars_pl: ['Zaczynamy!', 'Umiejętności',  'Skontaktuj się'],\r\n        nav_bars_eng: ['Here we go!', 'My skills', 'Contact details'],\r\n        paths: ['/Start', '/Skills', '/Hire']\r\n    }\r\n\r\n    render(){\r\n        let navID = 0;\r\n        return(\r\n            <div className={classes.wrapper}>\r\n                <div className={classes.list} onMouseOver={this.props.onMouseOver}>\r\n                        {this.props.language === 'PL' \r\n                        ? this.state.nav_bars_pl.map(path => {\r\n                            return (\r\n                                <NavLink \r\n                                key={path}\r\n                                to={this.state.paths[navID++]}\r\n                                className={classes.NavLink}\r\n                                activeClassName={classes.active}>\r\n                                    { path }\r\n                                </NavLink>\r\n                            )\r\n                        })\r\n                        : this.state.nav_bars_eng.map(path => {\r\n                            return (\r\n                                <NavLink \r\n                                key={path}\r\n                                to={this.state.paths[navID++]}\r\n                                className={classes.NavLink}\r\n                                activeClassName={classes.active}>\r\n                                    { path }\r\n                                </NavLink>\r\n                            )\r\n                            })\r\n                        }\r\n                </div>\r\n                <Settings/>\r\n             </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language : state.language,\r\n        theme : state.theme\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withRouter(Navigation));","import React from 'react';\r\nimport classes from './Spinner.css';\r\nconst spinner = () => (\r\n    <div className={classes.loader}>Loading...</div>\r\n);\r\n\r\nexport default spinner;","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport {Switch, Route, Redirect, withRouter} from 'react-router-dom';\nimport Navigation from './containers/Navigation/Navigation';\nimport {pageTransition} from './shared/transitionClasses';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\nimport Spinner from './components/UI/Spinner';\nimport { Suspense } from \"react\";\nimport lazy from \"react-lazy-with-preload\";\nconst LazyStart = lazy(() => import('./containers/Home/Home'));\nconst LazySkills = lazy(() => import('./containers/Skills/Skills'));\nconst LazyHire = lazy(() => import('./containers/Hire/Hire'));\n\nclass App extends Component {\n\n  state = {\n    preload : false\n  }\n\n  preloadContainers = () => {\n    if(!this.state.preload){\n      if(this.props.history.location.pathname !== '/Start'){\n        LazyStart.preload();\n      }\n      LazySkills.preload();\n      LazyHire.preload();\n      this.setState({preload: true});\n    }\n  }\n\n  componentDidMount = () => {\n    LazySkills.preload();\n  }\n  \n  render(){\n    let pageToRender = (\n      <TransitionGroup>\n        <CSSTransition \n          key={this.props.location.pathname}\n          classNames={pageTransition}\n          timeout = {0}>\n          <Switch>\n            <Route path={this.props.location.pathname + '/Start'} render={ () => <Suspense fallback={<Spinner/>}><LazyStart /></Suspense>}/>\n            <Route path={this.props.location.pathname + '/Skills'} render={ () => <Suspense fallback={<Spinner/>}><LazySkills /></Suspense>}/>\n            <Route path={this.props.location.pathname + '/Start'} render={ () => <Suspense fallback={<Spinner/>}><LazyHire/></Suspense>}/>\n            <Redirect from='/' to={this.props.location.pathname + '/Start'}/>\n          </Switch>\n        </CSSTransition>\n      </TransitionGroup>\n    )\n\n    return (\n      <div className={classes.App}>\n        <Navigation lang={'PL'} onMouseOver={this.preloadContainers}/>\n        {pageToRender}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    language: 'ENG',\r\n    theme: 'LIGHT'\r\n}\r\n\r\nconst changeLanguage = (state, action) => {\r\n    return {\r\n        ...state,\r\n        language: action.language\r\n    }\r\n}\r\n\r\nconst changeTheme = (state, action) => {\r\n    return {\r\n        ...state,\r\n        theme: action.theme\r\n    }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.CHANGE_LANGUAGE: \r\n            return changeLanguage(state, action);\r\n        case actionTypes.CHANGE_THEME: \r\n            return changeTheme(state, action);\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport UIReducer from './store/reducers/UI';\nimport thunk from 'redux-thunk';\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  : null || compose;\n\nconst store = createStore(UIReducer);\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"switch\":\"toggle_switch__1b724\",\"toggler\":\"toggle_toggler__ljUBA\",\"sun\":\"toggle_sun__wSaBj\",\"moon\":\"toggle_moon__2hEBk\",\"ul\":\"toggle_ul__2meLE\",\"active\":\"toggle_active__IYIRv\",\"buttonToggle-enter\":\"toggle_buttonToggle-enter__LXCA4\",\"buttonToggle-enter-done\":\"toggle_buttonToggle-enter-done__3YqZi\",\"buttonToggle-exit\":\"toggle_buttonToggle-exit__37f1Q\",\"buttonToggle-exit-done\":\"toggle_buttonToggle-exit-done__304sw\",\"slide-enter\":\"toggle_slide-enter__1FcAI\",\"slide-enter-done\":\"toggle_slide-enter-done__tRF8a\",\"slide-exit\":\"toggle_slide-exit__3AsE9\",\"slide-exit-done\":\"toggle_slide-exit-done__Anv2Z\"};"],"sourceRoot":""}