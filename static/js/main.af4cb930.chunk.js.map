{"version":3,"sources":["shared/transition.module.css","containers/Settings/settings.module.css","shared/transitionClasses.js","App.module.css","containers/Settings/settings.js","store/actions/UI.js","store/actions/actionTypes.js","containers/Navigation/Navigation.js","components/UI/Spinner.js","App.js","serviceWorker.js","store/reducers/UI.js","index.js","containers/Navigation/Navigation.module.css"],"names":["module","exports","textSmoothTransition","enter","classes","enterActive","enterDone","exit","exitDone","imgSmoothTransition","pageTransition","moveImage","toggleButton","Settings","changeToEnglish","props","language","changeLanguage","changeToPolish","className","toggleWrapper","onClick","this","active","Component","connect","state","theme","dispatch","type","Navigation","nav_bars_pl","nav_bars_eng","paths","menuActive","document","getElementById","classList","toggle","activeMenu","setState","prevState","showMenuButton","window","addEventListener","toggleMenu","bind","navID","CSSTransition","in","classNames","timeout","clickHandler","burger","wrapper","id","list","onMouseOver","map","path","key","to","NavLink","activeClassName","buttonVisible","withRouter","spinner","loader","LazyStart","lazy","LazySkills","LazyHire","App","preload","prevScroll","preloadContainers","history","location","pathname","scrollHandler","scrollY","toggleMenuButton","componentDidMount","pageToRender","TransitionGroup","render","fallback","from","lang","visible","Boolean","hostname","match","initialState","action","changeTheme","reducer","store","createStore","UIReducer","app","basename","process","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af4cb930.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textToggle-enter\":\"transition_textToggle-enter__1-CG0\",\"textToggle-enter-done\":\"transition_textToggle-enter-done__d-yi9\",\"textToggle-exit\":\"transition_textToggle-exit__ifTRU\",\"textToggle-exit-done\":\"transition_textToggle-exit-done__3Okpc\",\"imgToggle-enter\":\"transition_imgToggle-enter__2AFYK\",\"imgToggle-enter-done\":\"transition_imgToggle-enter-done__3LoGe\",\"imgToggle-exit\":\"transition_imgToggle-exit__15qi9\",\"imgToggle-exit-done\":\"transition_imgToggle-exit-done__1MC9X\",\"page-enter\":\"transition_page-enter__1pjJu\",\"page-enter-done\":\"transition_page-enter-done__13VPS\",\"page-exit\":\"transition_page-exit__2RfNl\",\"page-exit-done\":\"transition_page-exit-done__1BT0i\",\"image-enter\":\"transition_image-enter__EpWUg\",\"image-enter-done\":\"transition_image-enter-done__2eIWk\",\"image-exit\":\"transition_image-exit__FAWhI\",\"image-exit-done\":\"transition_image-exit-done__352aV\",\"button-enter\":\"transition_button-enter__3M6I4\",\"button-enter-done\":\"transition_button-enter-done__3Sp7C\",\"button-exit\":\"transition_button-exit__1vwBR\",\"button-exit-done\":\"transition_button-exit-done__JP1Xm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toggleWrapper\":\"settings_toggleWrapper__2Mcfs\",\"comment\":\"settings_comment__3gnyW\",\"active\":\"settings_active__kJacf\"};","import classes from './transition.module.css';\r\n\r\nexport const textSmoothTransition = {\r\n    enter: classes['textToggle-enter'],\r\n    enterActive: classes['textToggle-enter-active'],\r\n    enterDone: classes['textToggle-enter-done'],\r\n    exit: classes['textToggle-exit'],\r\n    exitDone: classes['textToggle-exit-done']\r\n}\r\n\r\nexport const imgSmoothTransition = {\r\n    enter: classes['imgToggle-enter'],\r\n    enterActive: classes['imgToggle-enter-active'],\r\n    enterDone: classes['imgToggle-enter-done'],\r\n    exit: classes['imgToggle-exit'],\r\n    exitDone: classes['imgToggle-exit-done']\r\n}\r\n\r\nexport const pageTransition = {\r\n    enter: classes['page-enter'],\r\n    enterActive: classes['page-enter-active'],\r\n    enterDone: classes['page-enter-done'],\r\n    exit: classes['page-exit'],\r\n    exitDone: classes['page-exit-done']\r\n}\r\n\r\nexport const moveImage = {\r\n    enter: classes['image-enter'],\r\n    enterActive: classes['image-enter-active'],\r\n    enterDone: classes['image-enter-done'],\r\n    exit: classes['image-exit'],\r\n    exitDone: classes['image-exit-done']\r\n}\r\n\r\nexport const toggleButton = {\r\n    enter: classes['button-enter'],\r\n    enterActive: classes['button-enter-active'],\r\n    enterDone: classes['button-enter-done'],\r\n    exit: classes['button-exit'],\r\n    exitDone: classes['button-exit-done']\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1rcVN\"};","import React, { Component } from 'react';\r\nimport classes from './settings.module.css';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Settings extends Component{\r\n\r\n    changeToEnglish = () => {\r\n        if(this.props.language !== 'ENG')\r\n            this.props.changeLanguage('ENG');\r\n    }\r\n\r\n    changeToPolish= () =>{\r\n        if(this.props.language !== 'PL')\r\n            this.props.changeLanguage('PL');\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className={classes.toggleWrapper}>\r\n                <div className={classes.language} onClick={this.changeToPolish}>\r\n                <p className={\r\n                        this.props.language === 'PL' \r\n                        ? classes.active\r\n                        : null}>PL</p>\r\n                </div>\r\n                <div className={classes.language} onClick={this.changeToEnglish}>\r\n                    <p className={\r\n                        this.props.language === 'ENG' \r\n                        ? classes.active\r\n                        : null}>ENG</p>\r\n                </div>    \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language : state.language,\r\n        theme : state.theme\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return{\r\n        changeLanguage: (language) => dispatch(actions.changeLanguage(language))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","import * as actionTypes from './actionTypes';\r\n\r\nexport const changeLanguage = (lang) => {\r\n    return {\r\n        type: actionTypes.CHANGE_LANGUAGE,\r\n        language: lang\r\n    }\r\n}\r\n\r\nexport const changeTheme = (themeType) => {\r\n    return {\r\n        type: actionTypes.CHANGE_THEME,\r\n        theme: themeType\r\n    }\r\n}\r\n\r\nexport const toggleMenuButton = (show) => {\r\n    return {\r\n        type: actionTypes.TOGGLE_MENU_BUTTON,\r\n        buttonVisible: show\r\n    }\r\n}","export const CHANGE_LANGUAGE = 'CHANGE_LANGUAGE';\r\nexport const CHANGE_THEME = 'CHANGE_THEME';\r\nexport const TOGGLE_MENU_BUTTON = \"TOGGLE_MENU_BUTTON\";","import React, { Component } from 'react';\r\nimport classes from './Navigation.module.css';\r\nimport {NavLink, withRouter} from 'react-router-dom';\r\nimport Settings from '../Settings/settings';\r\nimport {connect} from 'react-redux';\r\nimport {toggleButton} from '../../shared/transitionClasses'\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\nclass Navigation extends Component{\r\n    state = {\r\n        nav_bars_pl: ['Zaczynamy!', 'Umiejętności',  'Skontaktuj się'],\r\n        nav_bars_eng: ['Here we go!', 'My skills', 'Contact details'],\r\n        paths: ['/Start', '/Skills', '/Hire'],\r\n        menuActive: false\r\n    }\r\n\r\n    clickHandler(){\r\n        const menu = document.getElementById('menu')\r\n        menu.classList.toggle(classes.activeMenu)\r\n        this.setState(prevState => (\r\n            {menuActive: !prevState.menuActive}\r\n        ))\r\n    }\r\n\r\n    toggleMenu(){\r\n        if(this.state.menuActive){\r\n            if(!this.props.showMenuButton){\r\n                const menu = document.getElementById('menu')\r\n                menu.classList.toggle(classes.activeMenu)\r\n                this.setState(prevState => (\r\n                    {menuActive: !prevState.menuActive}\r\n                ))\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        window.addEventListener('scroll', this.toggleMenu.bind(this))\r\n    }\r\n\r\n    render(){\r\n        let navID = 0;\r\n        return(\r\n            <div>\r\n                <CSSTransition \r\n                    in={this.props.showMenuButton}\r\n                    classNames={toggleButton}\r\n                    timeout={0}>\r\n                    <div className={classes.toggleMenu} onClick={this.clickHandler.bind(this)}>\r\n                        <div className={classes.burger}></div>\r\n                    </div>\r\n                </CSSTransition>\r\n                <div className={classes.wrapper} id=\"menu\">\r\n                    <div className={classes.list} onMouseOver={this.props.onMouseOver}>\r\n                            {this.props.language === 'PL' \r\n                            ? this.state.nav_bars_pl.map(path => {\r\n                                return (\r\n                                    <NavLink \r\n                                    key={path}\r\n                                    to={this.state.paths[navID++]}\r\n                                    className={classes.NavLink}\r\n                                    activeClassName={classes.active}>\r\n                                        { path }\r\n                                    </NavLink>\r\n                                )\r\n                            })\r\n                            : this.state.nav_bars_eng.map(path => {\r\n                                return (\r\n                                    <NavLink \r\n                                    key={path}\r\n                                    to={this.state.paths[navID++]}\r\n                                    className={classes.NavLink}\r\n                                    activeClassName={classes.active}>\r\n                                        { path }\r\n                                    </NavLink>\r\n                                )\r\n                                })\r\n                            }\r\n                    </div>\r\n                    <Settings/>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language : state.language,\r\n        theme : state.theme,\r\n        showMenuButton: state.buttonVisible\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(withRouter(Navigation));","import React from 'react';\r\nimport classes from './Spinner.css';\r\nconst spinner = () => (\r\n    <div className={classes.loader}>Loading...</div>\r\n);\r\n\r\nexport default spinner;","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport {Switch, Route, Redirect, withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport * as actions from './store/actions/index';\nimport Navigation from './containers/Navigation/Navigation';\nimport {pageTransition} from './shared/transitionClasses';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\nimport Spinner from './components/UI/Spinner';\nimport { Suspense } from \"react\";\nimport lazy from \"react-lazy-with-preload\";\nconst LazyStart = lazy(() => import('./containers/Home/Home'));\nconst LazySkills = lazy(() => import('./containers/Skills/Skills'));\nconst LazyHire = lazy(() => import('./containers/Hire/Hire'));\n\nclass App extends Component {\n\n  state = {\n    preload : false,\n    prevScroll: 0\n  }\n\n  preloadContainers = () => {\n    if(!this.state.preload){\n      if(this.props.history.location.pathname !== '/Start'){\n        LazyStart.preload();\n      }\n      LazySkills.preload();\n      LazyHire.preload();\n      this.setState({preload: true});\n    }\n  }\n\n  scrollHandler = () =>{\n    if(window.scrollY - this.state.prevScroll <= 0){\n      this.props.toggleMenuButton(true)\n      this.setState({prevScroll: window.scrollY})\n    }else{\n      this.props.toggleMenuButton(false)\n      this.setState({prevScroll: window.scrollY})\n  }\n}\n\n  componentDidMount = () => {\n    LazySkills.preload();\n    window.addEventListener('scroll', this.scrollHandler);\n  }\n  \n  render(){\n    let pageToRender = (\n      <TransitionGroup>\n        <CSSTransition \n          key={this.props.location.pathname}\n          classNames={pageTransition}\n          timeout = {0}>\n          <Switch>\n            <Route path='/Start' render={ () => <Suspense fallback={<Spinner/>}><LazyStart /></Suspense>}/>\n            <Route path='/Skills' render={ () => <Suspense fallback={<Spinner/>}><LazySkills /></Suspense>}/>\n            <Route path='/Hire' render={ () => <Suspense fallback={<Spinner/>}><LazyHire/></Suspense>}/>\n            <Redirect from=\"*\" to='/'/>\n          </Switch>\n        </CSSTransition>\n      </TransitionGroup>\n    )\n\n    return (\n      <div className={classes.App}>\n        <Navigation lang={'PL'} onMouseOver={this.preloadContainers}/>\n        {pageToRender}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return{\n      toggleMenuButton: (visible) => dispatch(actions.toggleMenuButton(visible))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(withRouter(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    language: 'ENG',\r\n    buttonVisible: true,\r\n    theme: false\r\n}\r\n\r\nconst changeLanguage = (state, action) => {\r\n    return {\r\n        ...state,\r\n        language: action.language\r\n    }\r\n}\r\n\r\nconst changeTheme = (state, action) => {\r\n    return {\r\n        ...state,\r\n        theme: !state.theme\r\n    }\r\n}\r\n\r\nconst toggleMenuButton = (state, action) => {\r\n    return {\r\n        ...state,\r\n        buttonVisible: action.buttonVisible\r\n    }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.CHANGE_LANGUAGE: \r\n            return changeLanguage(state, action);\r\n        case actionTypes.CHANGE_THEME: \r\n            return changeTheme(state, action);\r\n        case actionTypes.TOGGLE_MENU_BUTTON:\r\n            return toggleMenuButton(state, action);\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport UIReducer from './store/reducers/UI';\n\n\nconst store = createStore(UIReducer);\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Navigation_wrapper__1lctD\",\"activeMenu\":\"Navigation_activeMenu__30_m_\",\"list\":\"Navigation_list__2Z6uO\",\"NavLink\":\"Navigation_NavLink__3ura2\",\"active\":\"Navigation_active__1fD5T\",\"toggleMenu\":\"Navigation_toggleMenu__LQ4ZF\",\"burger\":\"Navigation_burger__X4Yzv\"};"],"sourceRoot":""}