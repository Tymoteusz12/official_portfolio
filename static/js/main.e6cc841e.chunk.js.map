{"version":3,"sources":["containers/Navigation/Navigation.module.css","shared/transition.module.css","shared/transitionClasses.js","App.module.css","containers/Navigation/Navigation.js","components/UI/Spinner.js","App.js","serviceWorker.js","store/reducers/UI.js","store/actions/actionTypes.js","index.js"],"names":["module","exports","textSmoothTransition","enter","classes","enterActive","enterDone","exit","exitDone","imgSmoothTransition","pageTransition","Navigation","state","nav_bars_pl","nav_bars_eng","paths","navID","className","list","onMouseOver","this","props","language","map","path","key","to","NavLink","activeClassName","active","Component","withRouter","spinner","loader","LazyStart","lazy","LazySkills","LazyHire","App","preload","preloadContainers","history","location","pathname","setState","pageToRender","TransitionGroup","CSSTransition","classNames","timeout","render","fallback","from","lang","Boolean","window","hostname","match","initialState","theme","changeLanguage","action","changeTheme","reducer","type","composeEnhancers","compose","rootReducer","combineReducers","UIReducer","store","createStore","applyMiddleware","thunk","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6cc841e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Navigation_list__2Z6uO\",\"NavLink\":\"Navigation_NavLink__3ura2\",\"active\":\"Navigation_active__1fD5T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textToggle-enter\":\"transition_textToggle-enter__1-CG0\",\"textToggle-enter-done\":\"transition_textToggle-enter-done__d-yi9\",\"textToggle-exit\":\"transition_textToggle-exit__ifTRU\",\"textToggle-exit-done\":\"transition_textToggle-exit-done__3Okpc\",\"imgToggle-enter\":\"transition_imgToggle-enter__2AFYK\",\"imgToggle-enter-done\":\"transition_imgToggle-enter-done__3LoGe\",\"imgToggle-exit\":\"transition_imgToggle-exit__15qi9\",\"imgToggle-exit-done\":\"transition_imgToggle-exit-done__1MC9X\",\"page-enter\":\"transition_page-enter__1pjJu\",\"page-enter-done\":\"transition_page-enter-done__13VPS\",\"page-exit\":\"transition_page-exit__2RfNl\",\"page-exit-done\":\"transition_page-exit-done__1BT0i\"};","import classes from './transition.module.css';\r\n\r\nexport const textSmoothTransition = {\r\n    enter: classes['textToggle-enter'],\r\n    enterActive: classes['textToggle-enter-active'],\r\n    enterDone: classes['textToggle-enter-done'],\r\n    exit: classes['textToggle-exit'],\r\n    exitDone: classes['textToggle-exit-done']\r\n}\r\n\r\nexport const imgSmoothTransition = {\r\n    enter: classes['imgToggle-enter'],\r\n    enterActive: classes['imgToggle-enter-active'],\r\n    enterDone: classes['imgToggle-enter-done'],\r\n    exit: classes['imgToggle-exit'],\r\n    exitDone: classes['imgToggle-exit-done']\r\n}\r\n\r\nexport const pageTransition = {\r\n    enter: classes['page-enter'],\r\n    enterActive: classes['page-enter-active'],\r\n    enterDone: classes['page-enter-done'],\r\n    exit: classes['page-exit'],\r\n    exitDone: classes['page-exit-done']\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1rcVN\"};","import React, { Component } from 'react';\r\nimport classes from './Navigation.module.css';\r\nimport {NavLink, withRouter} from 'react-router-dom';\r\nclass Navigation extends Component{\r\n\r\n    state = {\r\n        nav_bars_pl: ['Zaczynamy!', 'Umiejętności',  'Zatrudnij :)'],\r\n        nav_bars_eng: ['Here we go!', 'My skills', 'Hire me :)'],\r\n        paths: ['/Start', '/Skills', '/Hire']\r\n    }\r\n\r\n\r\n    render(){\r\n        let navID = 0;\r\n        return(\r\n            <div className={classes.list} onMouseOver={this.props.onMouseOver}>\r\n                    {this.props.language === 'PL' \r\n                    ? this.state.nav_bars_pl.map(path => {\r\n                        return (\r\n                            <NavLink \r\n                            key={path}\r\n                            to={this.state.paths[navID++]}\r\n                            className={classes.NavLink}\r\n                            activeClassName={classes.active}>\r\n                                { path }\r\n                            </NavLink>\r\n                        )\r\n                    })\r\n                    : this.state.nav_bars_eng.map(path => {\r\n                        return (\r\n                            <NavLink \r\n                            key={path}\r\n                            to={this.state.paths[navID++]}\r\n                            className={classes.NavLink}\r\n                            activeClassName={classes.active}>\r\n                                { path }\r\n                            </NavLink>\r\n                        )\r\n                        })\r\n                    }\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language : state.UIReducer.language,\r\n        theme : state.UIReducer.theme\r\n    }\r\n}\r\n\r\nexport default withRouter(Navigation);","import React from 'react';\r\nimport classes from './Spinner.css';\r\nconst spinner = () => (\r\n    <div className={classes.loader}>Loading...</div>\r\n);\r\n\r\nexport default spinner;","import React, { Component } from 'react';\nimport classes from './App.module.css';\nimport {Switch, Route, Redirect, withRouter} from 'react-router-dom';\nimport Navigation from './containers/Navigation/Navigation';\nimport {pageTransition} from './shared/transitionClasses';\nimport {TransitionGroup, CSSTransition} from 'react-transition-group';\nimport Spinner from './components/UI/Spinner';\nimport { Suspense } from \"react\";\nimport lazy from \"react-lazy-with-preload\";\n\nconst LazyStart = lazy(() => import('./containers/Home/Home'));\nconst LazySkills = lazy(() => import('./containers/Skills/Skills'));\nconst LazyHire = lazy(() => import('./containers/Hire/Hire'));\n\nclass App extends Component {\n\n  state = {\n    preload : false\n  }\n\n  preloadContainers = () => {\n    if(!this.state.preload){\n      if(this.props.history.location.pathname !== '/Start'){\n        LazyStart.preload();\n      }\n      LazySkills.preload();\n      LazyHire.preload();\n      this.setState({preload: false});\n    }\n  }\n  \n  render(){\n    let pageToRender = (\n      <TransitionGroup>\n        <CSSTransition \n          key={this.props.location.pathname}\n          classNames={pageTransition}\n          timeout = {0}>\n          <Switch>\n            <Route path='/Start' render={ () => <Suspense fallback={<Spinner/>}><LazyStart/></Suspense>}/>\n            <Route path='/Skills' render={ () => <Suspense fallback={<Spinner/>}><LazySkills/></Suspense>}/>\n            <Route path='/Hire' render={ () => <Suspense fallback={<Spinner/>}><LazyHire/></Suspense>}/>\n            <Redirect from='/' to='/Start'/>\n          </Switch>\n        </CSSTransition>\n      </TransitionGroup>\n    )\n    \n    return (\n      <div className={classes.App}>\n        <Navigation lang={'PL'} onMouseOver={this.preloadContainers}/>\n        {pageToRender}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    lang: 'ENG',\r\n    theme: 'LIGHT'\r\n}\r\n\r\nconst changeLanguage = (state, action) => {\r\n    return {\r\n        ...state,\r\n        lang: action.lang\r\n    }\r\n}\r\n\r\nconst changeTheme = (state, action) => {\r\n    return {\r\n        ...state,\r\n        theme: action.theme\r\n    }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.CHANGE_LANGUAGE: \r\n            return changeLanguage(state, action);\r\n        case actionTypes.CHANGE_THEME: \r\n            return changeTheme(state, action);\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","export const CHANGE_LANGUAGE = 'CHANGE_LANGUAGE';\r\nexport const CHANGE_THEME = 'CHANGE_THEME';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport UIReducer from './store/reducers/UI';\nimport thunk from 'redux-thunk';\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__  : null || compose;\n\nconst rootReducer = combineReducers({\n  UIReducer: UIReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}